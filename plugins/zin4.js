import { prepareWAMessageMedia, generateWAMessageFromContent } from '@whiskeysockets/baileys';

const handler = async (m, { conn }) => {

let txt = `> *YouTube Play üçß.*\n\n`;
txt += `hola\n\n`;
txt += `‚Ä¢ *Duraci√≥n:*\n`;
txt += `‚Ä¢ *Autor:*\n`;
txt += `‚Ä¢ *Publicado:*\n`;
txt += `‚Ä¢ *Url:*\n\n`;
await conn.sendMessage(m.chat, {
    image: { url: 'https://i.ibb.co/Rpsxjb5t/file.jpg' },
    caption: txt,
    footer: 'la cosa es seria chavito\nte amo w',
    contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true
    },
    buttons: [
        {
            type: 4,
            nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                    title: '‚äπ‚Çä ‚ãÜ·Øì·°£ê≠© r·•±s·•ô·•£ùóç·•≤·É´·•Üs ·•°·•Ü·•ôùóç·•ô·ë≤·•±',
                    sections: [
                        {
                            title: 'my focking bicht',
                            highlight_label: '',
                            rows: [
                                {
                                    header: '‚å¨ Message',
                                    title: 'menu all',
                                    description: 'i like pussydog',
                                    id: ".menu"
                                },
                                {
                                    header: '‚å¨ Message',
                                    title: 'check ping',
                                    description: 'i like pussycat',
                                    id: ".ping"
                                },
                            ],
                        },
                    ],
                }),
            },
        },
        {
            type: 4,
            nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                    title: '‚äπ‚Çä ‚ãÜ·Øì·°£ê≠© r·•±s·•ô·•£ùóç·•≤·É´·•Üs s‚ç¥·•Üùóç—ñùñø·•°',
                    sections: [
                        {
                            title: 'Options',
                            highlight_label: '',
                            rows: [
                                {
                                    header: '‚å¨ Tools',
                                    title: 'Tool 1',
                                    description: 'Use this tool',
                                    id: ".tool1"
                                },
                                {
                                    header: '‚å¨ Tools',
                                    title: 'Tool 2',
                                    description: 'Use this another tool',
                                    id: ".tool2"
                                },
                            ],
                        },
                    ],
                }),
            },
        },
        {
            buttonId: '.ping',
            buttonText: { displayText: '·Øì·°£ê≠© ·•≤·•ô·É´—ñ·•Ü' },
            type: 1,
        },
        {
            buttonId: '.tqto',
            buttonText: { displayText: '·Øì·°£ê≠© ·•é—ñ·É´·•±·•Ü' },
            type: 1,
        },
    ],
    headerType: 1,
    viewOnce: true
}, { quoted: m });

};

handler.command = ['tesyt']; 
export default handler;

